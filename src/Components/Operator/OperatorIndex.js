import React, { useRef, useState } from 'react'

import Manager, {PrizePerHit} from '../GameManager';
import { GameStates } from '../GameManager';

import * as Util from '../../Utils/Utils';

import './OperatorIndex.css'

function Report() {

    let Metrics = Manager.GameData.History.reduce(
        (acc, game) => {
            let voucher = Util.Voucher(game.Generated, game.Guess); 
            acc.hit += voucher.Matches;
            acc.prize += voucher.Prize;
            return acc;
        }
    , {hit : 0, prize : 0} )

    let noWinsCount = Manager.GameData.History.filter(
        game => Util.Voucher(game.Generated, game.Guess).Matches <= 1
    ).length;

    return (
        <div>
            <h1>
                Username : {Manager.GameData.Player.name} <br/>
                Balance : {Manager.GameData.Player.balance}
            </h1>
        
            {[5,4,3,2].map(
                (value, index) => {
                    let count = Manager.GameData.History.filter(
                        game => Util.Voucher(game.Generated, game.Guess).Matches === value
                    ).length;

                    return (
                        <div key={index}>
                            {value} Matches : {count} 
                        </div>
                    )
                }
            )
            }
            
            <div> No Wins : {noWinsCount} </div>

            <div> One Round : 500 forint </div>

            <div> One Match : {PrizePerHit} forint </div>

            <div> Total Round : {Manager.GameData.History.length} </div>

            <div> Income : {Manager.GameData.History.length * 500} forint </div>

            <div> Prize Deducted : {Metrics.prize} forint </div>

            <div> Profit : {Manager.GameData.History.length * 500 - Metrics.prize} </div>

        </div>
    );
}


function History() {
    const defaultData = Manager.GameData.History; 
    const [data, setData] = useState(defaultData);
    const [sortCol, setSortCol] = useState('default');

    const sortVia = (col) => {
        if(col === 'Match'){
            setData(
                [...data].sort(
                    (a,b) => {
                        let matchA = Util.Voucher(a.Generated, a.Guess).Matches;
                        let matchB = Util.Voucher(b.Generated, b.Guess).Matches;
                        return matchA - matchB
                    }
                )
            )
            setSortCol('Number of Matches');
        }
        else if(col === 'Prize'){
            setData(
                [...data].sort(
                    (a,b) => {
                        let prizeA = Util.Voucher(a.Generated, a.Guess).Prize;
                        let prizeB = Util.Voucher(b.Generated, b.Guess).Prize;
                        return prizeA - prizeB
                    }
                )
            )
            setSortCol('Prize');
        }
        else{
            setData(
                [...data].sort(
                    (a,b) => {
                        let ownerA = a.ByPlayer? 'Player' : 'Admin'; 
                        let ownerB = b.ByPlayer? 'Player' : 'Admin';
                        return ownerA.charAt(0) > ownerB.charAt(0) ? 1 : -1;
                    }
                )
            )
            setSortCol('Owner');
        }

    }


    return (
        <div className='childP'>
            <h1>
                History 
            </h1>
            <h2>
                Username : {Manager.GameData.Player.name} <br/>
                Balance : {Manager.GameData.Player.balance}
            </h2>
            <h3>Sorted by {sortCol} </h3>
            <button onClick={() => { setData(defaultData); setSortCol('default'); } }>
                Clear Sorting
            </button>
            <table>
                <thead>
                    <th>No.</th>
                    <th onClick={()=> sortVia('Match') } >Number of Matches</th>
                    <th onClick={()=> sortVia('Prize') }>Prize</th>
                    <th onClick={()=> sortVia('Owner') }>Generated By</th>
                </thead>
                <tbody>
                    {data.map( (game, index) => {
                            let voucher = Util.Voucher(game.Generated, game.Guess);
                            return (
                                <tr key={index}>
                                    <td>{index+1}</td>
                                    <td>{voucher.Matches}</td>
                                    <td>{voucher.Prize}</td>
                                    <td>{game.ByPlayer ? 'Player' : 'Admin'}</td>
                                </tr>
                            )
                        }
                        )}
                </tbody>
            </table>

        </div>
    )

}

function TrialOperator() {

    const [ViewHistory, setViewHistory] = useState(false);

    const [NumberOfGames, setNumberOfGames] = useState(0);
    const [GeneratedNumbers, setGeneratedNumbers] = useState([]);
    const [Guesses, setGuesses] = useState([]);
    const inputBoxRef = useRef(null);

    const PrepareGame = () => {
        const couponPrice = NumberOfGames * 500;
        if(Manager.GameData.Player.balance < couponPrice){
            inputBoxRef.current.classList.add('error');
            setTimeout( () => {
                inputBoxRef.current.classList.remove('error')
            }, 500);
            return;
        }
        Manager.GameData.Player.balance -= couponPrice;
        Manager.GameData.Operator.balance += couponPrice;
        Manager.save();

        let numbers = [];
        for(let i=0; i<NumberOfGames; i++){
            let randomNumbers = [];
            for(let j=0; j<5; j++){
                randomNumbers.push(Math.floor( Math.random() * ( 39 ) + 1 ));
            }   
            numbers.push(randomNumbers);
        }
        setGeneratedNumbers( numbers );

        Manager.CurrentGameState = GameStates.PLAYING;
    }

    const StartRound = () => {
        
        let guesses = [];
        for(let i=0; i<5; i++){
            guesses.push(Math.floor( Math.random() * ( 39 ) + 1 ));
        } 
        setGuesses(guesses);

        let currentIndex = GeneratedNumbers.length - NumberOfGames;
    
        Manager.GameData.History.push(
            {
                Generated : GeneratedNumbers[currentIndex],
                Guess : guesses,
                ByPlayer : false
            }
        )

        let prizeMoney = Util.Voucher(GeneratedNumbers[currentIndex], guesses).Prize;
        Manager.GameData.Operator.balance -= prizeMoney;
        Manager.GameData.Player.balance += prizeMoney;

        Manager.save();

        Manager.CurrentGameState = GameStates.FINISH;
    }

    const nextRound = () => {
        setNumberOfGames(prev => prev - 1);
        Manager.CurrentGameState = GameStates.PLAYING;
        if(NumberOfGames - 1 === 0){
            Manager.CurrentGameState = GameStates.FINISH;
        }
        if(NumberOfGames === 0) { Manager.CurrentGameState = GameStates.LOBBY;  }

    }

    

    return (
        <div className='parent'>
            
            {Manager.CurrentGameState === GameStates.LOBBY &&
                <div className='childP'>
                    <h1> Playing as Admin </h1>
                    <input ref={inputBoxRef} type='number' placeholder='Number of Games' onChange={e => setNumberOfGames( Number(e.target.value)) } />
                    <button onClick={PrepareGame}>Play</button>
                    <button onClick={ () => {setViewHistory(!ViewHistory)}  }>
                        {ViewHistory ? 'Close History' : 'View History'} 
                    </button>
                    {ViewHistory && <History/>}
                </div>    
            }
            
            {Manager.CurrentGameState === GameStates.PLAYING && NumberOfGames > 0 &&
                <div>
                    <button onClick={StartRound}>Start Round {GeneratedNumbers.length-NumberOfGames+1} </button>
                </div>
            }

            {Manager.CurrentGameState === GameStates.FINISH && NumberOfGames > 0 &&
                <div className='childO'>
                    <h2>Generated Numbers</h2>
                    <div> { GeneratedNumbers[ GeneratedNumbers.length - NumberOfGames ].toString() } </div>
                    <h2>Random Guesses</h2>
                    <div> { Guesses.toString() } </div>
                    <br/>
                    <h2> 
                        Balance : {Manager.GameData.Operator.balance}
                    </h2>
                    <button onClick={nextRound}>Next</button>
                </div>
            }

            {Manager.CurrentGameState === GameStates.FINISH && NumberOfGames === 0 &&
                <div className='childP'>
                    <Report/>
                    <button onClick={nextRound}>Continue</button>
                </div>
            }

        </div>
    )
}

function OperatorIndex() {

    return (
        <div>
            
            <TrialOperator/>
            
        </div>
    )
}

export default OperatorIndex